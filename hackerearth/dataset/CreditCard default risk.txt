{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>owns_car</th>\n",
       "      <th>owns_house</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>net_yearly_income</th>\n",
       "      <th>no_of_days_employed</th>\n",
       "      <th>occupation_type</th>\n",
       "      <th>total_family_members</th>\n",
       "      <th>migrant_worker</th>\n",
       "      <th>yearly_debt_payments</th>\n",
       "      <th>credit_limit</th>\n",
       "      <th>credit_limit_used(%)</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>prev_defaults</th>\n",
       "      <th>default_in_last_6months</th>\n",
       "      <th>credit_card_default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>CST_115179</td>\n",
       "      <td>ita Bose</td>\n",
       "      <td>46</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>107934.04</td>\n",
       "      <td>612.0</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33070.28</td>\n",
       "      <td>18690.93</td>\n",
       "      <td>73</td>\n",
       "      <td>544.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>CST_121920</td>\n",
       "      <td>Alper Jonathan</td>\n",
       "      <td>29</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109862.62</td>\n",
       "      <td>2771.0</td>\n",
       "      <td>Laborers</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15329.53</td>\n",
       "      <td>37745.19</td>\n",
       "      <td>52</td>\n",
       "      <td>857.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>CST_109330</td>\n",
       "      <td>Umesh Desai</td>\n",
       "      <td>37</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>230153.17</td>\n",
       "      <td>204.0</td>\n",
       "      <td>Laborers</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48416.60</td>\n",
       "      <td>41598.36</td>\n",
       "      <td>43</td>\n",
       "      <td>650.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>CST_128288</td>\n",
       "      <td>Rie</td>\n",
       "      <td>39</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122325.82</td>\n",
       "      <td>11941.0</td>\n",
       "      <td>Core staff</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22574.36</td>\n",
       "      <td>32627.76</td>\n",
       "      <td>20</td>\n",
       "      <td>754.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>CST_151355</td>\n",
       "      <td>McCool</td>\n",
       "      <td>46</td>\n",
       "      <td>M</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>387286.00</td>\n",
       "      <td>1459.0</td>\n",
       "      <td>Core staff</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38282.95</td>\n",
       "      <td>52950.64</td>\n",
       "      <td>75</td>\n",
       "      <td>927.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id            name  age gender owns_car owns_house  no_of_children  \\\n",
       "0  CST_115179        ita Bose   46      F        N          Y             0.0   \n",
       "1  CST_121920  Alper Jonathan   29      M        N          Y             0.0   \n",
       "2  CST_109330     Umesh Desai   37      M        N          Y             0.0   \n",
       "3  CST_128288             Rie   39      F        N          Y             0.0   \n",
       "4  CST_151355          McCool   46      M        Y          Y             0.0   \n",
       "\n",
       "   net_yearly_income  no_of_days_employed occupation_type  \\\n",
       "0          107934.04                612.0         Unknown   \n",
       "1          109862.62               2771.0        Laborers   \n",
       "2          230153.17                204.0        Laborers   \n",
       "3          122325.82              11941.0      Core staff   \n",
       "4          387286.00               1459.0      Core staff   \n",
       "\n",
       "   total_family_members  migrant_worker  yearly_debt_payments  credit_limit  \\\n",
       "0                   1.0             1.0              33070.28      18690.93   \n",
       "1                   2.0             0.0              15329.53      37745.19   \n",
       "2                   2.0             0.0              48416.60      41598.36   \n",
       "3                   2.0             0.0              22574.36      32627.76   \n",
       "4                   1.0             0.0              38282.95      52950.64   \n",
       "\n",
       "   credit_limit_used(%)  credit_score  prev_defaults  default_in_last_6months  \\\n",
       "0                    73         544.0              2                        1   \n",
       "1                    52         857.0              0                        0   \n",
       "2                    43         650.0              0                        0   \n",
       "3                    20         754.0              0                        0   \n",
       "4                    75         927.0              0                        0   \n",
       "\n",
       "   credit_card_default  \n",
       "0                    1  \n",
       "1                    0  \n",
       "2                    0  \n",
       "3                    0  \n",
       "4                    0  "
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "df=pd.read_csv('C:\\\\cleaning data\\\\hackerearth\\\\dataset\\\\train.csv')\n",
    "\n",
    "\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>credit_card_default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>CST_115179</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>CST_121920</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>CST_109330</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>CST_128288</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>CST_151355</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id  credit_card_default\n",
       "0  CST_115179                    1\n",
       "1  CST_121920                    0\n",
       "2  CST_109330                    0\n",
       "3  CST_128288                    0\n",
       "4  CST_151355                    0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sample = pd.read_csv('C:\\\\cleaning data\\\\hackerearth\\\\dataset\\\\sample_submission.csv')\n",
    "df_sample.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customer_id                  0\n",
       "name                         0\n",
       "age                          0\n",
       "gender                       0\n",
       "owns_car                   547\n",
       "owns_house                   0\n",
       "no_of_children             774\n",
       "net_yearly_income            0\n",
       "no_of_days_employed        463\n",
       "occupation_type              0\n",
       "total_family_members        83\n",
       "migrant_worker              87\n",
       "yearly_debt_payments        95\n",
       "credit_limit                 0\n",
       "credit_limit_used(%)         0\n",
       "credit_score                 8\n",
       "prev_defaults                0\n",
       "default_in_last_6months      0\n",
       "credit_card_default          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(45528, 19)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.dropna(axis=0,inplace=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "import seaborn as sns\n",
    "\n",
    "LB = LabelEncoder()\n",
    "\n",
    "df['gender'] = LB.fit_transform(df['gender'])\n",
    "\n",
    "df['owns_house'] = LB.fit_transform(df['owns_house'])\n",
    "df['owns_car'] = LB.fit_transform(df['owns_car'].astype(str))\n",
    "df['occupation_type'] = LB.fit_transform(df['occupation_type'])\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>owns_car</th>\n",
       "      <th>owns_house</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>net_yearly_income</th>\n",
       "      <th>no_of_days_employed</th>\n",
       "      <th>occupation_type</th>\n",
       "      <th>total_family_members</th>\n",
       "      <th>migrant_worker</th>\n",
       "      <th>yearly_debt_payments</th>\n",
       "      <th>credit_limit</th>\n",
       "      <th>credit_limit_used(%)</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>prev_defaults</th>\n",
       "      <th>default_in_last_6months</th>\n",
       "      <th>credit_card_default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>CST_115179</td>\n",
       "      <td>ita Bose</td>\n",
       "      <td>46</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>107934.04</td>\n",
       "      <td>612.0</td>\n",
       "      <td>17</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>33070.28</td>\n",
       "      <td>18690.93</td>\n",
       "      <td>73</td>\n",
       "      <td>544.0</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>CST_121920</td>\n",
       "      <td>Alper Jonathan</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>109862.62</td>\n",
       "      <td>2771.0</td>\n",
       "      <td>8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>15329.53</td>\n",
       "      <td>37745.19</td>\n",
       "      <td>52</td>\n",
       "      <td>857.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>CST_109330</td>\n",
       "      <td>Umesh Desai</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>230153.17</td>\n",
       "      <td>204.0</td>\n",
       "      <td>8</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>48416.60</td>\n",
       "      <td>41598.36</td>\n",
       "      <td>43</td>\n",
       "      <td>650.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>CST_128288</td>\n",
       "      <td>Rie</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>122325.82</td>\n",
       "      <td>11941.0</td>\n",
       "      <td>3</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>22574.36</td>\n",
       "      <td>32627.76</td>\n",
       "      <td>20</td>\n",
       "      <td>754.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>CST_151355</td>\n",
       "      <td>McCool</td>\n",
       "      <td>46</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>387286.00</td>\n",
       "      <td>1459.0</td>\n",
       "      <td>3</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>38282.95</td>\n",
       "      <td>52950.64</td>\n",
       "      <td>75</td>\n",
       "      <td>927.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id            name  age  gender  owns_car  owns_house  \\\n",
       "0  CST_115179        ita Bose   46       0         0           1   \n",
       "1  CST_121920  Alper Jonathan   29       1         0           1   \n",
       "2  CST_109330     Umesh Desai   37       1         0           1   \n",
       "3  CST_128288             Rie   39       0         0           1   \n",
       "4  CST_151355          McCool   46       1         1           1   \n",
       "\n",
       "   no_of_children  net_yearly_income  no_of_days_employed  occupation_type  \\\n",
       "0             0.0          107934.04                612.0               17   \n",
       "1             0.0          109862.62               2771.0                8   \n",
       "2             0.0          230153.17                204.0                8   \n",
       "3             0.0          122325.82              11941.0                3   \n",
       "4             0.0          387286.00               1459.0                3   \n",
       "\n",
       "   total_family_members  migrant_worker  yearly_debt_payments  credit_limit  \\\n",
       "0                   1.0             1.0              33070.28      18690.93   \n",
       "1                   2.0             0.0              15329.53      37745.19   \n",
       "2                   2.0             0.0              48416.60      41598.36   \n",
       "3                   2.0             0.0              22574.36      32627.76   \n",
       "4                   1.0             0.0              38282.95      52950.64   \n",
       "\n",
       "   credit_limit_used(%)  credit_score  prev_defaults  default_in_last_6months  \\\n",
       "0                    73         544.0              2                        1   \n",
       "1                    52         857.0              0                        0   \n",
       "2                    43         650.0              0                        0   \n",
       "3                    20         754.0              0                        0   \n",
       "4                    75         927.0              0                        0   \n",
       "\n",
       "   credit_card_default  \n",
       "0                    1  \n",
       "1                    0  \n",
       "2                    0  \n",
       "3                    0  \n",
       "4                    0  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>owns_car</th>\n",
       "      <th>owns_house</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>net_yearly_income</th>\n",
       "      <th>no_of_days_employed</th>\n",
       "      <th>occupation_type</th>\n",
       "      <th>total_family_members</th>\n",
       "      <th>migrant_worker</th>\n",
       "      <th>yearly_debt_payments</th>\n",
       "      <th>credit_limit</th>\n",
       "      <th>credit_limit_used(%)</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>prev_defaults</th>\n",
       "      <th>default_in_last_6months</th>\n",
       "      <th>credit_card_default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>age</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.004048</td>\n",
       "      <td>-0.008159</td>\n",
       "      <td>0.003061</td>\n",
       "      <td>-0.009809</td>\n",
       "      <td>0.004131</td>\n",
       "      <td>0.001927</td>\n",
       "      <td>-0.002428</td>\n",
       "      <td>-0.012596</td>\n",
       "      <td>-0.007506</td>\n",
       "      <td>-0.003278</td>\n",
       "      <td>0.004354</td>\n",
       "      <td>-0.006097</td>\n",
       "      <td>0.001733</td>\n",
       "      <td>0.000434</td>\n",
       "      <td>-0.001386</td>\n",
       "      <td>-0.001919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>gender</td>\n",
       "      <td>-0.004048</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.347112</td>\n",
       "      <td>-0.041245</td>\n",
       "      <td>0.055950</td>\n",
       "      <td>0.027278</td>\n",
       "      <td>-0.155617</td>\n",
       "      <td>-0.130035</td>\n",
       "      <td>0.089031</td>\n",
       "      <td>0.135629</td>\n",
       "      <td>0.080056</td>\n",
       "      <td>0.026070</td>\n",
       "      <td>0.019630</td>\n",
       "      <td>-0.031848</td>\n",
       "      <td>0.049783</td>\n",
       "      <td>0.045207</td>\n",
       "      <td>0.056827</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>owns_car</td>\n",
       "      <td>-0.008159</td>\n",
       "      <td>0.347112</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.004910</td>\n",
       "      <td>0.105036</td>\n",
       "      <td>0.031521</td>\n",
       "      <td>-0.152747</td>\n",
       "      <td>-0.118296</td>\n",
       "      <td>0.150245</td>\n",
       "      <td>0.093606</td>\n",
       "      <td>0.134404</td>\n",
       "      <td>0.030160</td>\n",
       "      <td>-0.002434</td>\n",
       "      <td>0.010051</td>\n",
       "      <td>-0.012378</td>\n",
       "      <td>-0.016942</td>\n",
       "      <td>-0.018158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>owns_house</td>\n",
       "      <td>0.003061</td>\n",
       "      <td>-0.041245</td>\n",
       "      <td>0.004910</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.005566</td>\n",
       "      <td>0.003112</td>\n",
       "      <td>0.061294</td>\n",
       "      <td>0.035556</td>\n",
       "      <td>0.003963</td>\n",
       "      <td>-0.022640</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>0.003518</td>\n",
       "      <td>0.000687</td>\n",
       "      <td>0.002887</td>\n",
       "      <td>0.003104</td>\n",
       "      <td>-0.002363</td>\n",
       "      <td>-0.003541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no_of_children</td>\n",
       "      <td>-0.009809</td>\n",
       "      <td>0.055950</td>\n",
       "      <td>0.105036</td>\n",
       "      <td>-0.005566</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.008834</td>\n",
       "      <td>-0.242834</td>\n",
       "      <td>-0.147083</td>\n",
       "      <td>0.880479</td>\n",
       "      <td>0.070055</td>\n",
       "      <td>0.029664</td>\n",
       "      <td>0.009227</td>\n",
       "      <td>0.008766</td>\n",
       "      <td>-0.014884</td>\n",
       "      <td>0.019917</td>\n",
       "      <td>0.021756</td>\n",
       "      <td>0.023885</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>net_yearly_income</td>\n",
       "      <td>0.004131</td>\n",
       "      <td>0.027278</td>\n",
       "      <td>0.031521</td>\n",
       "      <td>0.003112</td>\n",
       "      <td>0.008834</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.028847</td>\n",
       "      <td>-0.018386</td>\n",
       "      <td>0.010280</td>\n",
       "      <td>0.001029</td>\n",
       "      <td>0.075565</td>\n",
       "      <td>0.993617</td>\n",
       "      <td>0.002775</td>\n",
       "      <td>-0.009986</td>\n",
       "      <td>-0.004754</td>\n",
       "      <td>0.015431</td>\n",
       "      <td>0.011731</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>no_of_days_employed</td>\n",
       "      <td>0.001927</td>\n",
       "      <td>-0.155617</td>\n",
       "      <td>-0.152747</td>\n",
       "      <td>0.061294</td>\n",
       "      <td>-0.242834</td>\n",
       "      <td>-0.028847</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.522729</td>\n",
       "      <td>-0.230322</td>\n",
       "      <td>-0.220179</td>\n",
       "      <td>-0.105372</td>\n",
       "      <td>-0.027281</td>\n",
       "      <td>-0.018027</td>\n",
       "      <td>0.036450</td>\n",
       "      <td>-0.036021</td>\n",
       "      <td>-0.033811</td>\n",
       "      <td>-0.047109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>occupation_type</td>\n",
       "      <td>-0.002428</td>\n",
       "      <td>-0.130035</td>\n",
       "      <td>-0.118296</td>\n",
       "      <td>0.035556</td>\n",
       "      <td>-0.147083</td>\n",
       "      <td>-0.018386</td>\n",
       "      <td>0.522729</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.146231</td>\n",
       "      <td>-0.111585</td>\n",
       "      <td>-0.074472</td>\n",
       "      <td>-0.018223</td>\n",
       "      <td>-0.004845</td>\n",
       "      <td>0.015651</td>\n",
       "      <td>-0.011272</td>\n",
       "      <td>-0.010800</td>\n",
       "      <td>-0.020545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>total_family_members</td>\n",
       "      <td>-0.012596</td>\n",
       "      <td>0.089031</td>\n",
       "      <td>0.150245</td>\n",
       "      <td>0.003963</td>\n",
       "      <td>0.880479</td>\n",
       "      <td>0.010280</td>\n",
       "      <td>-0.230322</td>\n",
       "      <td>-0.146231</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.080133</td>\n",
       "      <td>0.079735</td>\n",
       "      <td>0.010059</td>\n",
       "      <td>0.003260</td>\n",
       "      <td>-0.011256</td>\n",
       "      <td>0.010347</td>\n",
       "      <td>0.013878</td>\n",
       "      <td>0.011029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>migrant_worker</td>\n",
       "      <td>-0.007506</td>\n",
       "      <td>0.135629</td>\n",
       "      <td>0.093606</td>\n",
       "      <td>-0.022640</td>\n",
       "      <td>0.070055</td>\n",
       "      <td>0.001029</td>\n",
       "      <td>-0.220179</td>\n",
       "      <td>-0.111585</td>\n",
       "      <td>0.080133</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.013365</td>\n",
       "      <td>-0.000530</td>\n",
       "      <td>0.009913</td>\n",
       "      <td>-0.014190</td>\n",
       "      <td>0.030577</td>\n",
       "      <td>0.031193</td>\n",
       "      <td>0.035011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>yearly_debt_payments</td>\n",
       "      <td>-0.003278</td>\n",
       "      <td>0.080056</td>\n",
       "      <td>0.134404</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>0.029664</td>\n",
       "      <td>0.075565</td>\n",
       "      <td>-0.105372</td>\n",
       "      <td>-0.074472</td>\n",
       "      <td>0.079735</td>\n",
       "      <td>0.013365</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.073642</td>\n",
       "      <td>-0.007108</td>\n",
       "      <td>0.004622</td>\n",
       "      <td>-0.012548</td>\n",
       "      <td>-0.011350</td>\n",
       "      <td>-0.012800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>credit_limit</td>\n",
       "      <td>0.004354</td>\n",
       "      <td>0.026070</td>\n",
       "      <td>0.030160</td>\n",
       "      <td>0.003518</td>\n",
       "      <td>0.009227</td>\n",
       "      <td>0.993617</td>\n",
       "      <td>-0.027281</td>\n",
       "      <td>-0.018223</td>\n",
       "      <td>0.010059</td>\n",
       "      <td>-0.000530</td>\n",
       "      <td>0.073642</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.003044</td>\n",
       "      <td>-0.009732</td>\n",
       "      <td>-0.004504</td>\n",
       "      <td>0.015877</td>\n",
       "      <td>0.012228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>credit_limit_used(%)</td>\n",
       "      <td>-0.006097</td>\n",
       "      <td>0.019630</td>\n",
       "      <td>-0.002434</td>\n",
       "      <td>0.000687</td>\n",
       "      <td>0.008766</td>\n",
       "      <td>0.002775</td>\n",
       "      <td>-0.018027</td>\n",
       "      <td>-0.004845</td>\n",
       "      <td>0.003260</td>\n",
       "      <td>0.009913</td>\n",
       "      <td>-0.007108</td>\n",
       "      <td>0.003044</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.172736</td>\n",
       "      <td>0.252857</td>\n",
       "      <td>0.254295</td>\n",
       "      <td>0.326074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>credit_score</td>\n",
       "      <td>0.001733</td>\n",
       "      <td>-0.031848</td>\n",
       "      <td>0.010051</td>\n",
       "      <td>0.002887</td>\n",
       "      <td>-0.014884</td>\n",
       "      <td>-0.009986</td>\n",
       "      <td>0.036450</td>\n",
       "      <td>0.015651</td>\n",
       "      <td>-0.011256</td>\n",
       "      <td>-0.014190</td>\n",
       "      <td>0.004622</td>\n",
       "      <td>-0.009732</td>\n",
       "      <td>-0.172736</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-0.472064</td>\n",
       "      <td>-0.451811</td>\n",
       "      <td>-0.543114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>prev_defaults</td>\n",
       "      <td>0.000434</td>\n",
       "      <td>0.049783</td>\n",
       "      <td>-0.012378</td>\n",
       "      <td>0.003104</td>\n",
       "      <td>0.019917</td>\n",
       "      <td>-0.004754</td>\n",
       "      <td>-0.036021</td>\n",
       "      <td>-0.011272</td>\n",
       "      <td>0.010347</td>\n",
       "      <td>0.030577</td>\n",
       "      <td>-0.012548</td>\n",
       "      <td>-0.004504</td>\n",
       "      <td>0.252857</td>\n",
       "      <td>-0.472064</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.814261</td>\n",
       "      <td>0.773396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>default_in_last_6months</td>\n",
       "      <td>-0.001386</td>\n",
       "      <td>0.045207</td>\n",
       "      <td>-0.016942</td>\n",
       "      <td>-0.002363</td>\n",
       "      <td>0.021756</td>\n",
       "      <td>0.015431</td>\n",
       "      <td>-0.033811</td>\n",
       "      <td>-0.010800</td>\n",
       "      <td>0.013878</td>\n",
       "      <td>0.031193</td>\n",
       "      <td>-0.011350</td>\n",
       "      <td>0.015877</td>\n",
       "      <td>0.254295</td>\n",
       "      <td>-0.451811</td>\n",
       "      <td>0.814261</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.778002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>credit_card_default</td>\n",
       "      <td>-0.001919</td>\n",
       "      <td>0.056827</td>\n",
       "      <td>-0.018158</td>\n",
       "      <td>-0.003541</td>\n",
       "      <td>0.023885</td>\n",
       "      <td>0.011731</td>\n",
       "      <td>-0.047109</td>\n",
       "      <td>-0.020545</td>\n",
       "      <td>0.011029</td>\n",
       "      <td>0.035011</td>\n",
       "      <td>-0.012800</td>\n",
       "      <td>0.012228</td>\n",
       "      <td>0.326074</td>\n",
       "      <td>-0.543114</td>\n",
       "      <td>0.773396</td>\n",
       "      <td>0.778002</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                              age    gender  owns_car  owns_house  \\\n",
       "age                      1.000000 -0.004048 -0.008159    0.003061   \n",
       "gender                  -0.004048  1.000000  0.347112   -0.041245   \n",
       "owns_car                -0.008159  0.347112  1.000000    0.004910   \n",
       "owns_house               0.003061 -0.041245  0.004910    1.000000   \n",
       "no_of_children          -0.009809  0.055950  0.105036   -0.005566   \n",
       "net_yearly_income        0.004131  0.027278  0.031521    0.003112   \n",
       "no_of_days_employed      0.001927 -0.155617 -0.152747    0.061294   \n",
       "occupation_type         -0.002428 -0.130035 -0.118296    0.035556   \n",
       "total_family_members    -0.012596  0.089031  0.150245    0.003963   \n",
       "migrant_worker          -0.007506  0.135629  0.093606   -0.022640   \n",
       "yearly_debt_payments    -0.003278  0.080056  0.134404   -0.001615   \n",
       "credit_limit             0.004354  0.026070  0.030160    0.003518   \n",
       "credit_limit_used(%)    -0.006097  0.019630 -0.002434    0.000687   \n",
       "credit_score             0.001733 -0.031848  0.010051    0.002887   \n",
       "prev_defaults            0.000434  0.049783 -0.012378    0.003104   \n",
       "default_in_last_6months -0.001386  0.045207 -0.016942   -0.002363   \n",
       "credit_card_default     -0.001919  0.056827 -0.018158   -0.003541   \n",
       "\n",
       "                         no_of_children  net_yearly_income  \\\n",
       "age                           -0.009809           0.004131   \n",
       "gender                         0.055950           0.027278   \n",
       "owns_car                       0.105036           0.031521   \n",
       "owns_house                    -0.005566           0.003112   \n",
       "no_of_children                 1.000000           0.008834   \n",
       "net_yearly_income              0.008834           1.000000   \n",
       "no_of_days_employed           -0.242834          -0.028847   \n",
       "occupation_type               -0.147083          -0.018386   \n",
       "total_family_members           0.880479           0.010280   \n",
       "migrant_worker                 0.070055           0.001029   \n",
       "yearly_debt_payments           0.029664           0.075565   \n",
       "credit_limit                   0.009227           0.993617   \n",
       "credit_limit_used(%)           0.008766           0.002775   \n",
       "credit_score                  -0.014884          -0.009986   \n",
       "prev_defaults                  0.019917          -0.004754   \n",
       "default_in_last_6months        0.021756           0.015431   \n",
       "credit_card_default            0.023885           0.011731   \n",
       "\n",
       "                         no_of_days_employed  occupation_type  \\\n",
       "age                                 0.001927        -0.002428   \n",
       "gender                             -0.155617        -0.130035   \n",
       "owns_car                           -0.152747        -0.118296   \n",
       "owns_house                          0.061294         0.035556   \n",
       "no_of_children                     -0.242834        -0.147083   \n",
       "net_yearly_income                  -0.028847        -0.018386   \n",
       "no_of_days_employed                 1.000000         0.522729   \n",
       "occupation_type                     0.522729         1.000000   \n",
       "total_family_members               -0.230322        -0.146231   \n",
       "migrant_worker                     -0.220179        -0.111585   \n",
       "yearly_debt_payments               -0.105372        -0.074472   \n",
       "credit_limit                       -0.027281        -0.018223   \n",
       "credit_limit_used(%)               -0.018027        -0.004845   \n",
       "credit_score                        0.036450         0.015651   \n",
       "prev_defaults                      -0.036021        -0.011272   \n",
       "default_in_last_6months            -0.033811        -0.010800   \n",
       "credit_card_default                -0.047109        -0.020545   \n",
       "\n",
       "                         total_family_members  migrant_worker  \\\n",
       "age                                 -0.012596       -0.007506   \n",
       "gender                               0.089031        0.135629   \n",
       "owns_car                             0.150245        0.093606   \n",
       "owns_house                           0.003963       -0.022640   \n",
       "no_of_children                       0.880479        0.070055   \n",
       "net_yearly_income                    0.010280        0.001029   \n",
       "no_of_days_employed                 -0.230322       -0.220179   \n",
       "occupation_type                     -0.146231       -0.111585   \n",
       "total_family_members                 1.000000        0.080133   \n",
       "migrant_worker                       0.080133        1.000000   \n",
       "yearly_debt_payments                 0.079735        0.013365   \n",
       "credit_limit                         0.010059       -0.000530   \n",
       "credit_limit_used(%)                 0.003260        0.009913   \n",
       "credit_score                        -0.011256       -0.014190   \n",
       "prev_defaults                        0.010347        0.030577   \n",
       "default_in_last_6months              0.013878        0.031193   \n",
       "credit_card_default                  0.011029        0.035011   \n",
       "\n",
       "                         yearly_debt_payments  credit_limit  \\\n",
       "age                                 -0.003278      0.004354   \n",
       "gender                               0.080056      0.026070   \n",
       "owns_car                             0.134404      0.030160   \n",
       "owns_house                          -0.001615      0.003518   \n",
       "no_of_children                       0.029664      0.009227   \n",
       "net_yearly_income                    0.075565      0.993617   \n",
       "no_of_days_employed                 -0.105372     -0.027281   \n",
       "occupation_type                     -0.074472     -0.018223   \n",
       "total_family_members                 0.079735      0.010059   \n",
       "migrant_worker                       0.013365     -0.000530   \n",
       "yearly_debt_payments                 1.000000      0.073642   \n",
       "credit_limit                         0.073642      1.000000   \n",
       "credit_limit_used(%)                -0.007108      0.003044   \n",
       "credit_score                         0.004622     -0.009732   \n",
       "prev_defaults                       -0.012548     -0.004504   \n",
       "default_in_last_6months             -0.011350      0.015877   \n",
       "credit_card_default                 -0.012800      0.012228   \n",
       "\n",
       "                         credit_limit_used(%)  credit_score  prev_defaults  \\\n",
       "age                                 -0.006097      0.001733       0.000434   \n",
       "gender                               0.019630     -0.031848       0.049783   \n",
       "owns_car                            -0.002434      0.010051      -0.012378   \n",
       "owns_house                           0.000687      0.002887       0.003104   \n",
       "no_of_children                       0.008766     -0.014884       0.019917   \n",
       "net_yearly_income                    0.002775     -0.009986      -0.004754   \n",
       "no_of_days_employed                 -0.018027      0.036450      -0.036021   \n",
       "occupation_type                     -0.004845      0.015651      -0.011272   \n",
       "total_family_members                 0.003260     -0.011256       0.010347   \n",
       "migrant_worker                       0.009913     -0.014190       0.030577   \n",
       "yearly_debt_payments                -0.007108      0.004622      -0.012548   \n",
       "credit_limit                         0.003044     -0.009732      -0.004504   \n",
       "credit_limit_used(%)                 1.000000     -0.172736       0.252857   \n",
       "credit_score                        -0.172736      1.000000      -0.472064   \n",
       "prev_defaults                        0.252857     -0.472064       1.000000   \n",
       "default_in_last_6months              0.254295     -0.451811       0.814261   \n",
       "credit_card_default                  0.326074     -0.543114       0.773396   \n",
       "\n",
       "                         default_in_last_6months  credit_card_default  \n",
       "age                                    -0.001386            -0.001919  \n",
       "gender                                  0.045207             0.056827  \n",
       "owns_car                               -0.016942            -0.018158  \n",
       "owns_house                             -0.002363            -0.003541  \n",
       "no_of_children                          0.021756             0.023885  \n",
       "net_yearly_income                       0.015431             0.011731  \n",
       "no_of_days_employed                    -0.033811            -0.047109  \n",
       "occupation_type                        -0.010800            -0.020545  \n",
       "total_family_members                    0.013878             0.011029  \n",
       "migrant_worker                          0.031193             0.035011  \n",
       "yearly_debt_payments                   -0.011350            -0.012800  \n",
       "credit_limit                            0.015877             0.012228  \n",
       "credit_limit_used(%)                    0.254295             0.326074  \n",
       "credit_score                           -0.451811            -0.543114  \n",
       "prev_defaults                           0.814261             0.773396  \n",
       "default_in_last_6months                 1.000000             0.778002  \n",
       "credit_card_default                     0.778002             1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.corr()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcac05f0>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['credit_limit'] = [1015611.88 if x >=31129970.49 else x for x in df['credit_score']]\n",
    "sns.boxplot(df['credit_limit'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xacc15d0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['yearly_debt_payments'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcf388b0>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWQAAAEHCAYAAACZezzUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAVlklEQVR4nO3dfXRcdZ3H8c83D236YKWkD0AopCHt0pxTF7G6itoDWx/6gHTdFWWXPQ3q0cOqJRb0rLSx9oEnl6UuVI+u7rKAR1dQFy30QaCC9VgFWmyhHp4CBjFAKQEthQpN89s/7m/CTTKTZCYzybfp+3VOTubeub/f/d7fTD5z52buHQshCAAw/MqGuwAAQIJABgAnCGQAcIJABgAnCGQAcKIin4UnTZoUamtrS1QKAIxMO3fufCGEMLm/5fIK5NraWu3YsaPwqgDgKGRmTw1kOQ5ZAIATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATBDIAOEEgA4ATeX2n3pFm/fr1amlpGVQfbW1tkqSamppilCRJqq+v19KlS4vWH4CRYUQHcktLi3bteViHxx5bcB/lr/5ZkvTca8UZqvJXXyxKPwBGnhEdyJJ0eOyxOnjqwoLbj3lkkyQNqo9s/QFATxxDBgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnCGQAcIJABgAnhiSQ169fr/Xr1w/FquAAjzdQmIqhWElLS8tQrAZO8HgDheGQBQA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMEMgA4QSADgBMVw10ARp7du3dLks4888zhLaRAZqYQQp/LVFRUqLq6Wnv37pUk1dTUaPTo0frDH/6gjo4OTZgwQfv371dlZaWmTJmitrY21dTUaN++fXr99de79dPR0SEz08qVK3XrrbdqyZIlam5uVghBEydO1HPPPddVV2VlpcrKyjR58mTt27dPnZ2dKisr0wknnKCysjJ1dnbqmWee0ZQpU/TCCy/ouuuu08SJE9Xc3Cwz08UXX6x169apo6ND5eXluuSSS3TNNdd01VBeXq5zzz1Xa9eu1fTp07V8+XJdddVVamtr07Rp03TllVequrpa7e3t+vKXv6z9+/erra1N06dP19VXXy1JWr16tb7yla+ourq6aztbWlrU1NSka6+9tls9a9eu1UsvvaSmpiatWbNGN954Y6+2PdvX19d3TWdr097erksvvVRPP/201q9fr4kTJ2ataaCWL1+u7du3a+7cuVqzZk3e7fNh/T3x0ubMmRN27NiR90qampokSddee23ebQejqalJO5/cq4OnLiy4jzGPbJKkQfXRs7+31U0d8rEYSkdqEA+3iooKHT58WOPGjdOBAweK0mdtba3e8pa3aMOGDV3Tra2t3e5PT2fq6OjoyHr/4sWLtWzZMq1bt66rz/R9IQTddtttOuecc7Rs2bKu+y644AK1trb2qmfx4sXavXu3WltbNX78eL3yyiu92vZsf8MNN3RNZ2uTri2zvmw1DVT6+XzPPffk3V6SzGxnCGFOf8txyAJFNW/evOEu4YjV0dGhEELRwliSWltbtXHjxm7TPe/PVkeu+zdt2qSWlhZt2bKlV7vbb79dW7ZsUQhBW7ZsUXt7u6Rk7zbTT2trqzZt2tTVZuPGjV33HThwoFfbbO3vvvvunG3a29u1efPmbvVv3rw5a78DsXz58m7TK1euzKt9vobkkEVbW5sOHjzYtac8VFpaWlT2+sDfAQyFsr/sV0vLy0M+FkPl8OHDw10CeijmY3Lo0CFddtllOnToUNb1dHZ2dt2+6aabtGzZMl122WXdlksHfvp2up9MW0m92l9++eU524QQetWWme7Z70Bs37692/S2bdsG3LYQ/e4hm9mnzWyHme3Yt29fSYsB4F9ra2vOY+yZ+R0dHbrzzju7ls9Hum229tlCPNPmrrvu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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['yearly_debt_payments'] = [175000 if x > 175000 else x for x in df['yearly_debt_payments']]\n",
    "sns.boxplot(df['yearly_debt_payments'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['customer_id', 'name', 'age', 'gender', 'owns_car', 'owns_house',\n",
       "       'no_of_children', 'net_yearly_income', 'no_of_days_employed',\n",
       "       'occupation_type', 'total_family_members', 'migrant_worker',\n",
       "       'yearly_debt_payments', 'credit_limit', 'credit_limit_used(%)',\n",
       "       'credit_score', 'prev_defaults', 'default_in_last_6months',\n",
       "       'credit_card_default'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xd0bad90>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df['credit_limit_used(%)'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:30: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:167: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  method='lar', copy_X=True, eps=np.finfo(np.float).eps,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:284: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_Gram=True, verbose=0,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:862: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1101: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, fit_path=True,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1127: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, positive=False):\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1362: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1602: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_n_alphas=1000, n_jobs=None, eps=np.finfo(np.float).eps,\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\least_angle.py:1738: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  eps=np.finfo(np.float).eps, copy_X=True, positive=False):\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\decomposition\\online_lda.py:29: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  EPS = np.finfo(np.float).eps\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\gradient_boosting.py:32: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  from ._gradient_boosting import predict_stages\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\gradient_boosting.py:32: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  from ._gradient_boosting import predict_stages\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:670: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_folds = np.zeros(n_samples, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:442: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  fold_sizes = np.full(n_splits, n_samples // n_splits, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:442: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  fold_sizes = np.full(n_splits, n_samples // n_splits, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:245: FutureWarning: The default value of n_estimators will change from 10 in version 0.20 to 100 in 0.22.\n",
      "  \"10 in version 0.20 to 100 in 0.22.\", FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9736836609586346"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features=df[['credit_limit_used(%)','credit_score', 'prev_defaults', 'default_in_last_6months','gender','migrant_worker']]\n",
    "target = df['credit_card_default']\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn import tree\n",
    "\n",
    "model = RandomForestClassifier()\n",
    "\n",
    "clf = cross_val_score(model,features,target,cv=5)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "clf.mean()\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:670: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_folds = np.zeros(n_samples, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:442: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  fold_sizes = np.full(n_splits, n_samples // n_splits, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:442: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  fold_sizes = np.full(n_splits, n_samples // n_splits, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:102: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  test_mask = np.zeros(_num_samples(X), dtype=np.bool)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9734078068231151"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import tree\n",
    "model2 = tree.DecisionTreeClassifier()\n",
    "clf2 = cross_val_score(model2,features,target,cv=5)\n",
    "clf2.mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9747184555274649"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "X_train,X_test,y_train,y_test = train_test_split(features,target,test_size=0.1)\n",
    "\n",
    "model2.fit(X_train,y_train)\n",
    "\n",
    "y_pred = model2.predict(X_test)\n",
    "\n",
    "accuracy_score(y_test,y_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\linear_model\\base.py:291: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  indices = (scores > 0).astype(np.int)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9811537577568376"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "\n",
    "model3 = LogisticRegression()\n",
    "model3.fit(X_train,y_train)\n",
    "\n",
    "y_pred1 = model3.predict(X_test)\n",
    "\n",
    "accuracy_score(y_test,y_pred1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\forest.py:489: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_store_unique_indices = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\ensemble\\base.py:158: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype=np.int)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9770167777522408"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(X_train,y_train)\n",
    "\n",
    "y_pred_random = model.predict(X_test)\n",
    "\n",
    "accuracy_score(y_test,y_pred_random)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\sklearn\\svm\\base.py:193: FutureWarning: The default value of gamma will change from 'auto' to 'scale' in version 0.22 to account better for unscaled features. Set gamma explicitly to 'auto' or 'scale' to avoid this warning.\n",
      "  \"avoid this warning.\", FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.9823029188692255"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "\n",
    "model_svm = svm.SVC(kernel='rbf')\n",
    "\n",
    "model_svm.fit(X_train,y_train)\n",
    "\n",
    "svm_pred = model_svm.predict(X_test)\n",
    "\n",
    "accuracy_score(y_test,svm_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>name</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>owns_car</th>\n",
       "      <th>owns_house</th>\n",
       "      <th>no_of_children</th>\n",
       "      <th>net_yearly_income</th>\n",
       "      <th>no_of_days_employed</th>\n",
       "      <th>occupation_type</th>\n",
       "      <th>total_family_members</th>\n",
       "      <th>migrant_worker</th>\n",
       "      <th>yearly_debt_payments</th>\n",
       "      <th>credit_limit</th>\n",
       "      <th>credit_limit_used(%)</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>prev_defaults</th>\n",
       "      <th>default_in_last_6months</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>CST_142525</td>\n",
       "      <td>Siva</td>\n",
       "      <td>52</td>\n",
       "      <td>F</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0.0</td>\n",
       "      <td>232640.53</td>\n",
       "      <td>998.0</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14406.73</td>\n",
       "      <td>26524.40</td>\n",
       "      <td>4</td>\n",
       "      <td>779.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>CST_129215</td>\n",
       "      <td>Scott</td>\n",
       "      <td>48</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>284396.79</td>\n",
       "      <td>1338.0</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>57479.99</td>\n",
       "      <td>68998.72</td>\n",
       "      <td>70</td>\n",
       "      <td>806.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>CST_138443</td>\n",
       "      <td>Victoria</td>\n",
       "      <td>50</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>149419.28</td>\n",
       "      <td>1210.0</td>\n",
       "      <td>Unknown</td>\n",
       "      <td>3.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>21611.01</td>\n",
       "      <td>25187.80</td>\n",
       "      <td>71</td>\n",
       "      <td>528.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>CST_123812</td>\n",
       "      <td>John McCrank</td>\n",
       "      <td>30</td>\n",
       "      <td>F</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>1.0</td>\n",
       "      <td>160437.54</td>\n",
       "      <td>503.0</td>\n",
       "      <td>Laborers</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>28990.76</td>\n",
       "      <td>29179.39</td>\n",
       "      <td>9</td>\n",
       "      <td>815.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>CST_144450</td>\n",
       "      <td>Martinne</td>\n",
       "      <td>52</td>\n",
       "      <td>M</td>\n",
       "      <td>N</td>\n",
       "      <td>Y</td>\n",
       "      <td>0.0</td>\n",
       "      <td>233480.37</td>\n",
       "      <td>157.0</td>\n",
       "      <td>Laborers</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>54213.72</td>\n",
       "      <td>82331.82</td>\n",
       "      <td>82</td>\n",
       "      <td>613.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  customer_id          name  age gender owns_car owns_house  no_of_children  \\\n",
       "0  CST_142525          Siva   52      F        Y          N             0.0   \n",
       "1  CST_129215         Scott   48      F        N          N             1.0   \n",
       "2  CST_138443      Victoria   50      F        N          N             1.0   \n",
       "3  CST_123812  John McCrank   30      F        N          N             1.0   \n",
       "4  CST_144450      Martinne   52      M        N          Y             0.0   \n",
       "\n",
       "   net_yearly_income  no_of_days_employed occupation_type  \\\n",
       "0          232640.53                998.0         Unknown   \n",
       "1          284396.79               1338.0         Unknown   \n",
       "2          149419.28               1210.0         Unknown   \n",
       "3          160437.54                503.0        Laborers   \n",
       "4          233480.37                157.0        Laborers   \n",
       "\n",
       "   total_family_members  migrant_worker  yearly_debt_payments  credit_limit  \\\n",
       "0                   2.0             0.0              14406.73      26524.40   \n",
       "1                   3.0             0.0              57479.99      68998.72   \n",
       "2                   3.0             0.0              21611.01      25187.80   \n",
       "3                   2.0             1.0              28990.76      29179.39   \n",
       "4                   2.0             1.0              54213.72      82331.82   \n",
       "\n",
       "   credit_limit_used(%)  credit_score  prev_defaults  default_in_last_6months  \n",
       "0                     4         779.0              0                        0  \n",
       "1                    70         806.0              0                        0  \n",
       "2                    71         528.0              2                        0  \n",
       "3                     9         815.0              0                        0  \n",
       "4                    82         613.0              1                        1  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test=pd.read_csv('C:\\\\cleaning data\\\\hackerearth\\\\dataset\\\\test.csv')\n",
    "df_test.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>credit_limit_used(%)</th>\n",
       "      <th>credit_score</th>\n",
       "      <th>prev_defaults</th>\n",
       "      <th>default_in_last_6months</th>\n",
       "      <th>gender</th>\n",
       "      <th>migrant_worker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>779.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>70</td>\n",
       "      <td>806.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>71</td>\n",
       "      <td>528.0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>815.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>F</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>82</td>\n",
       "      <td>613.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>M</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   credit_limit_used(%)  credit_score  prev_defaults  default_in_last_6months  \\\n",
       "0                     4         779.0              0                        0   \n",
       "1                    70         806.0              0                        0   \n",
       "2                    71         528.0              2                        0   \n",
       "3                     9         815.0              0                        0   \n",
       "4                    82         613.0              1                        1   \n",
       "\n",
       "  gender  migrant_worker  \n",
       "0      F             0.0  \n",
       "1      F             0.0  \n",
       "2      F             0.0  \n",
       "3      F             1.0  \n",
       "4      M             1.0  "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_finaltest_set = df_test[['credit_limit_used(%)','credit_score', 'prev_defaults', 'default_in_last_6months','gender','migrant_worker']]\n",
    "\n",
    "df_finaltest_set.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\pandas\\core\\frame.py:4102: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  errors=errors,\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xf5b73d0>"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_finaltest_set['gender'] = LB.fit_transform(df_finaltest_set['gender'])\n",
    "\n",
    "df_finaltest_set.drop(df_finaltest_set[df_finaltest_set['gender'] > 1].index, inplace = True)\n",
    "\n",
    "sns.boxplot(df_finaltest_set['gender'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0xcc73510>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(df_finaltest_set['migrant_worker'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TANU\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "credit_limit_used(%)       0\n",
       "credit_score               0\n",
       "prev_defaults              0\n",
       "default_in_last_6months    0\n",
       "gender                     0\n",
       "migrant_worker             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_finaltest_set.dropna(axis=0,inplace=True)\n",
    "df_finaltest_set.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(11383, 2)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_pred = pd.Series(model_svm.predict(df_finaltest_set), name=\"credit_card_default\")\n",
    "\n",
    "ID_column = df_test['customer_id']\n",
    "results = pd.concat([ID_column, final_pred], axis=1)\n",
    "\n",
    "results.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "results.to_csv('C:\\\\cleaning data\\\\hackerearth\\\\dataset\\\\CreditCard_SVM.csv',index = False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
